import numpy as np

def get_quadrature_weights(p):
	if p == 1:
		return np.array([])
	elif p == 2:
		return np.array([])
	elif p == 3: # 4th order
		return np.array([
			[5/24, 1/3, -1/24], 
			[-1/24, 1/3, 5/24]], dtype=np.longdouble)
	elif p == 4: # 6th order
		return np.array([
			[1/16*(22/15+2/(3*np.sqrt(5))), np.sqrt(5)/24*(np.sqrt(5)-1/5), np.sqrt(5)/24*(np.sqrt(5)-13/5), 1/16*(2/(3*np.sqrt(5))-2/15)], 
			[-1/(12*np.sqrt(5)), 7/(12*np.sqrt(5)), 7/(12*np.sqrt(5)), -1/(12*np.sqrt(5))],  
			[1/16*(2/(3*np.sqrt(5))-2/15), np.sqrt(5)/24*(np.sqrt(5)-13/5), np.sqrt(5)/24*(np.sqrt(5)-1/5), 1/16*(22/15+2/(3*np.sqrt(5)))]], dtype=np.longdouble)
	elif p == 5: # 8th order
		return np.array([
			[1/40*(17/7+3*np.sqrt(3/7)/7), -7/120*(3*np.sqrt(3/7)/7-7/3), -1/15*(32*np.sqrt(3/7)/7-8/3), -7/120*(23*np.sqrt(3/7)/7-7/3), 1/40*(3*np.sqrt(3/7)/7-3/7)],
			[-3*(105+8*np.sqrt(21))/15680, 269/(320*np.sqrt(21)), 32/(35*np.sqrt(21)), -61/(320*np.sqrt(21)), 1/40*(45/56-3*np.sqrt(3/7)/7)],
			[1/40*(45/56-3*np.sqrt(3/7)/7), -61/(320*np.sqrt(21)), 32/(35*np.sqrt(21)), 269/(320*np.sqrt(21)), -3*(105+8*np.sqrt(21))/15680],
			[1/40*(3*np.sqrt(3/7)/7-3/7), -7/120*(23*np.sqrt(3/7)/7-7/3), -1/15*(32*np.sqrt(3/7)/7-8/3), -7/120*(3*np.sqrt(3/7)/7-7/3), 1/40*(17/7+3*np.sqrt(3/7)/7)]], dtype=np.longdouble)
	elif p == 6: # 10th order
		return np.array([
			[0.04567980513375504, 0.08186781700897067, -0.01487460578908984, 0.007627676118250960, -0.004471780440573709, 0.001643426003954534],
			[-0.01977141974587522, 0.1319729916238551, 0.1488353414399507, -0.03163175085140583, 0.01627947681823340, -0.005772735560348282],
			[0.01155425750184726, -0.03641102686156192, 0.1674725276000372, 0.1674725276000372, -0.03641102686156192, 0.01155425750184726],
			[-0.005772735560348282, 0.01627947681823340, -0.03163175085140583, 0.1488353414399507, 0.1319729916238551, -0.01977141974587522],
			[0.001643426003954534, -0.004471780440573709, 0.007627676118250960, -0.01487460578908984, 0.08186781700897067, 0.04567980513375504]], dtype=np.longdouble)
	elif p == 7: # 12th order
		return np.array([
			[(8151+385*np.sqrt(15)+5*np.sqrt(45540+7766*np.sqrt(15)))/335412, 
			31/350-np.sqrt(3/5)/40-1/84*np.sqrt(1/33*(15+2*np.sqrt(15))),
			(11550*np.sqrt(3375-210*np.sqrt(15))+58065*np.sqrt(495-66*np.sqrt(15))-154770*np.sqrt(225-14*np.sqrt(15))-8575*np.sqrt(55*(15-2*np.sqrt(15)))+15972*(3+7*np.sqrt(15))-5*np.sqrt(15+2*np.sqrt(15))*(12705*np.sqrt(3)-22869*np.sqrt(5)+2116*np.sqrt(33)+1260*np.sqrt(55)))/(184800*(7*np.sqrt(15)-3)),
			64/525-8*np.sqrt(1/11*(4149225-199214*np.sqrt(15)))/38115,
			(2205*np.sqrt(495-66*np.sqrt(15))-1505*np.sqrt(55*(15-2*np.sqrt(15)))+3993*(3+7*np.sqrt(15))-5*np.sqrt(66*(5005470+1278391*np.sqrt(15))))/(46200*(7*np.sqrt(15)-3)),
			(372-21*np.sqrt(15)-10*np.sqrt(2/33*(20610-1949*np.sqrt(15))))/4200,
			-5*(33+77*np.sqrt(15)-np.sqrt(45540+7766*np.sqrt(15)))/335412],
			[-5*np.sqrt(10155/11+11*np.sqrt(165)+14*np.sqrt(31050/11+165*np.sqrt(165)))/15246,
			np.sqrt(1/11*(14887050+406455*np.sqrt(11)+np.sqrt(165*(4333785311-160979700*np.sqrt(11)))))/(420*(3+7*np.sqrt(15))),
			(3+7*np.sqrt(15))*np.sqrt(1/11*(14887050-406455*np.sqrt(11)+np.sqrt(165*(4333785311+160979700*np.sqrt(11)))))/304920,
			-8*np.sqrt(8298450/11-57706*np.sqrt(165))/38115,
			np.sqrt(1/11*(13566150-3938655*np.sqrt(11)+3383555*np.sqrt(15)-1044354*np.sqrt(165)))/(420*(7*np.sqrt(15)-3)),
			-np.sqrt(1/11*(13566150+3938655*np.sqrt(11)-3383555*np.sqrt(15)-1044354*np.sqrt(165)))/(420*(3+7*np.sqrt(15))),
			5*np.sqrt(10155/11+11*np.sqrt(165)-14*np.sqrt(31050/11+165*np.sqrt(165)))/15246],
			[5*(3465+1232*np.sqrt(15)+16*np.sqrt(45540-7766*np.sqrt(15)))/5366592,
			-(8*np.sqrt(66*(5005470-1278391*np.sqrt(15)))+385*np.sqrt(199005-46774*np.sqrt(15)))/(73920*(3+7*np.sqrt(15))),
			np.sqrt(1/66*(34197510+5222489*np.sqrt(15)))/6720,
			8*np.sqrt(1/11*(4149225+199214*np.sqrt(15)))/38115,
			-np.sqrt(1/66*(1555110+347129*np.sqrt(15)))/6720,
			(385*np.sqrt(199005-46774*np.sqrt(15))-8*np.sqrt(66*(5005470-1278391*np.sqrt(15))))/(73920*(3+7*np.sqrt(15))),
			-5*(3465+1232*np.sqrt(15)-16*np.sqrt(45540-7766*np.sqrt(15)))/5366592],
			[-5*(3465+1232*np.sqrt(15)-16*np.sqrt(45540-7766*np.sqrt(15)))/5366592,
			(385*np.sqrt(199005-46774*np.sqrt(15))-8*np.sqrt(66*(5005470-1278391*np.sqrt(15))))/(73920*(3+7*np.sqrt(15))),
			-np.sqrt(1/66*(1555110+347129*np.sqrt(15)))/6720,
			8*np.sqrt(1/11*(4149225+199214*np.sqrt(15)))/38115,
			np.sqrt(1/66*(34197510+5222489*np.sqrt(15)))/6720,
			-(8*np.sqrt(66*(5005470-1278391*np.sqrt(15)))+385*np.sqrt(199005-46774*np.sqrt(15)))/(73920*(3+7*np.sqrt(15))),
			5*(3465+1232*np.sqrt(15)+16*np.sqrt(45540-7766*np.sqrt(15)))/5366592],
			[5*np.sqrt(10155/11+11*np.sqrt(165)-14*np.sqrt(31050/11+165*np.sqrt(165)))/15246,
			-np.sqrt(1/11*(13566150+3938655*np.sqrt(11)-3383555*np.sqrt(15)-1044354*np.sqrt(165)))/(420*(3+7*np.sqrt(15))),
			np.sqrt(1/11*(13566150-3938655*np.sqrt(11)+3383555*np.sqrt(15)-1044354*np.sqrt(165)))/(420*(7*np.sqrt(15)-3)),
			-8*np.sqrt(8298450/11-57706*np.sqrt(165))/38115,
			(3+7*np.sqrt(15))*np.sqrt(1/11*(14887050-406455*np.sqrt(11)+np.sqrt(165*(4333785311+160979700*np.sqrt(11)))))/304920,
			np.sqrt(1/11*(14887050+406455*np.sqrt(11)+np.sqrt(165*(4333785311-160979700*np.sqrt(11)))))/(420*(3+7*np.sqrt(15))),
			-5*np.sqrt(10155/11+11*np.sqrt(165)+14*np.sqrt(31050/11+165*np.sqrt(165)))/15246],
			[-5*(33+77*np.sqrt(15)-np.sqrt(45540+7766*np.sqrt(15)))/335412,
			(372-21*np.sqrt(15)-10*np.sqrt(2/33*(20610-1949*np.sqrt(15))))/4200,
			(2205*np.sqrt(495-66*np.sqrt(15))-1505*np.sqrt(55*(15-2*np.sqrt(15)))+3993*(3+7*np.sqrt(15))-5*np.sqrt(66*(5005470+1278391*np.sqrt(15))))/(46200*(7*np.sqrt(15)-3)),
			64/525-8*np.sqrt(1/11*(4149225-199214*np.sqrt(15)))/38115,
			(11550*np.sqrt(3375-210*np.sqrt(15))+58065*np.sqrt(495-66*np.sqrt(15))-154770*np.sqrt(225-14*np.sqrt(15))-8575*np.sqrt(55*(15-2*np.sqrt(15)))+15972*(3+7*np.sqrt(15))-5*np.sqrt(15+2*np.sqrt(15))*(12705*np.sqrt(3)-22869*np.sqrt(5)+2116*np.sqrt(33)+1260*np.sqrt(55)))/(184800*(7*np.sqrt(15)-3)),
			31/350-np.sqrt(3/5)/40-1/84*np.sqrt(1/33*(15+2*np.sqrt(15))),
			(8151+385*np.sqrt(15)+5*np.sqrt(45540+7766*np.sqrt(15)))/335412]], dtype=np.longdouble)
	elif p == 8: # 14th order
		return np.array([
			[0.02473751443887554, 0.04489266260275502, -0.008140767742389755, 0.004254082548545938, -0.002704205075015820, 0.001845386694481989, -0.0012262209861064897, 0.0004714732640502676],
			[-0.01147879461674528, 0.07575707022134238, 0.08813840352904136, -0.01873491351117141, 0.010336154281849825, -0.006678055617616706, 0.004331171002027366, -0.001651051750495372],
			[0.007775636903083832, -0.02436955451201600, 0.10904401405767530, 0.1157267866103150, -0.02576926941828822, 0.01424967872556530, -0.008713811658458341, 0.003257001057454825],
			[-0.005254636439080951, 0.01468079690220908, -0.02789731340500531, 0.12312076189311661, 0.12312076189311661, -0.02789731340500531, 0.01468079690220908, -0.005254636439080951],
			[0.003257001057454825, -0.008713811658458341, 0.01424967872556530, -0.02576926941828822, 0.1157267866103150, 0.10904401405767530, -0.02436955451201600, 0.007775636903083832],
			[-0.001651051750495372, 0.004331171002027366, -0.006678055617616706, 0.01033615428184983, -0.01873491351117141, 0.08813840352904136, 0.07575707022134238, -0.01147879461674528],
			[0.0004714732640502676, -0.001226220986106490, 0.001845386694481989, -0.002704205075015820, 0.004254082548545938, -0.008140767742389755, 0.04489266260275502, 0.02473751443887554]], dtype=np.longdouble)
	elif p == 9: # 16th order
		return np.array([
			[0.01929383820104321, 0.03512552097762180, -0.006364102418704785, 0.003333777196998382, -0.002136847017608240, 0.001494299162728227, -0.0010740606993816593, 0.0007337726665392889, -0.0002851957749663016],
			[-0.009109757792815563, 0.05996098747174031, 0.07029609804714287, -0.01491950853084110, 0.008286783918160042, -0.005475124949910926, 0.003829384788800812, -0.002581277805922897, 0.0009982728040076477],
			[0.006385289435344151, -0.01999299135315514, 0.08895006539644536, 0.09567121002275585, -0.02128061007288630, 0.011981429357581908, -0.007851649951160638, 0.005137129709423210, -0.001965464702068600],
			[-0.004579352482460689, 0.01277631662685617, -0.02419983871830038, 0.10567260162700526, 0.1080104917664388, -0.02454442839979442, 0.013683459805239289, -0.008411777512699976, 0.003151259200805032],
			[0.003151259200805032, -0.008411777512699976, 0.01368345980523929, -0.02454442839979442, 0.1080104917664388, 0.10567260162700526, -0.02419983871830038, 0.012776316626856166, -0.004579352482460689],
			[-0.001965464702068600, 0.005137129709423210, -0.007851649951160638, 0.01198142935758191, -0.02128061007288630, 0.09567121002275585, 0.08895006539644536, -0.01999299135315514, 0.006385289435344151],
			[0.0009982728040076477, -0.002581277805922897, 0.003829384788800812, -0.005475124949910926, 0.008286783918160042, -0.01491950853084110, 0.07029609804714287, 0.05996098747174031, -0.009109757792815563],
			[-0.0002851957749663016, 0.0007337726665392889, -0.001074060699381659, 0.001494299162728227, -0.002136847017608240, 0.003333777196998382, -0.006364102418704785, 0.03512552097762180, 0.01929383820104321]], dtype=np.longdouble)
	elif p == 10: # 18th order
		return np.array([
			[0.0154651488861222122962870428932489157,0.02821797600073164548250716679539079,-0.00510907595067658322974573104567009439,0.00267970261346019209074899855893529803,-0.00172462331235231172761872363843218033,0.00121919000983766600825994071952905230,-0.000901410378966958286343144568385858427,0.000669760258193760883654250616171857246,-0.000466141727447515318156445064280463673,0.000182519517868484885940314322323615984],
			[-0.00739058405725894840189045504368980994,0.04855653867450062987335146266833609,0.057227112215872056954037374395877440,-0.0121294080709088972529467306806417915,0.00675885416046794971155611847476632191,-0.00450964869379792966651536592815320439,0.00323976441450123044664542683883662093,-0.00237020179437209624803510821575109637,0.00163631225054206633498287135031058380,-0.000638717569069192338272350878637448580],
			[0.00530145369661971034386672212849216774,-0.0165899721997625155974205219093716782,0.0735350410072874665646551968031845844,0.0798052377673116196551978792834771443,-0.0177233673811385296570383494290661437,0.0100551561804418705006799425181596141,-0.00674897058373916641213824589786726260,0.00477278594649777441730948389668102079,-0.00323918041083976266614824663416602460,0.00125627362485182252200168030476294132],
			[-0.00395114640859562734837828071817208886,0.0110151727549871565421227225667926377,-0.0208266457783471927939287758398899376,0.0903539354014665943510666290847332669,0.0936558603975173279226384767610765464,-0.0212653420706915192055510432804969851,0.0120822953335515377321510042461617320,-0.00797161256654658968827825637123976250,0.00523845348210102518463594084252784050,-0.00200797447341397717900075390495101717],
			[0.00289413789398662633055719200773383489,-0.00771616339927767427276136523784332567,0.0125175076936546292000604766261599098,-0.0223598046568342733865906881780272035,0.0973038013016642044418442677610635511,0.0973038013016642044418442677610635511,-0.0223598046568342733865906881780272035,0.0125175076936546292000604766261599098,-0.00771616339927767427276136523784332567,0.00289413789398662633055719200773383489],
			[-0.00200797447341397717900075390495101717,0.00523845348210102518463594084252784050,-0.00797161256654658968827825637123976250,0.0120822953335515377321510042461617320,-0.0212653420706915192055510432804969851,0.0936558603975173279226384767610765464,0.0903539354014665943510666290847332669,-0.0208266457783471927939287758398899376,0.0110151727549871565421227225667926377,-0.00395114640859562734837828071817208886 ],
			[0.00125627362485182252200168030476294132,-0.00323918041083976266614824663416602460,0.00477278594649777441730948389668102079,-0.00674897058373916641213824589786726260,0.0100551561804418705006799425181596141,-0.0177233673811385296570383494290661437,0.0798052377673116196551978792834771443,0.0735350410072874665646551968031845844,-0.0165899721997625155974205219093716782,0.00530145369661971034386672212849216774],
			[-0.000638717569069192338272350878637448580,0.00163631225054206633498287135031058380,-0.00237020179437209624803510821575109637,0.00323976441450123044664542683883662093,-0.00450964869379792966651536592815320439,0.00675885416046794971155611847476632191,-0.0121294080709088972529467306806417915,0.0572271122158720569540373743958774399,0.04855653867450062987335146266833609,-0.00739058405725894840189045504368980994],
			[0.000182519517868484885940314322323615984,-0.000466141727447515318156445064280463673,0.000669760258193760883654250616171857246,-0.000901410378966958286343144568385858427,0.00121919000983766600825994071952905230,-0.00172462331235231172761872363843218033,0.00267970261346019209074899855893529803,-0.00510907595067658322974573104567009439,0.0282179760007316454825071667953907904,0.0154651488861222122962870428932489157]
			], dtype=np.longdouble)
def get_quadrature_points(p):
	if p == 1:
		return np.array([-1.0])
	elif p == 2:
		return np.array([-1.0, 1.0])
	elif p == 3:
		return np.array([-1.0, 0.0, 1.0])
	elif p == 4:
		return np.array([-1.0, -np.sqrt(1/5), np.sqrt(1/5), 1.0])
	elif p == 5:
		return np.array([-1.0, -np.sqrt(3/7), 0.0, np.sqrt(3/7), 1.0])
	elif p == 6:
		return np.array([
			-1.0,
			-np.sqrt(1.0/3.0+2.0*np.sqrt(7)/21),
			-np.sqrt(1.0/3.0-2.0*np.sqrt(7)/21),
			np.sqrt(1.0/3.0-2.0*np.sqrt(7)/21),
			np.sqrt(1.0/3.0+2.0*np.sqrt(7)/21),
			1.0])
	elif p == 7: # 12th order
		return np.array([-1.0, -np.sqrt(5/11+2/11*np.sqrt(5/3)), -np.sqrt(5/11-2/11*np.sqrt(5/3)), 0, np.sqrt(5/11-2/11*np.sqrt(5/3)), np.sqrt(5/11+2/11*np.sqrt(5/3)), 1.0])
	elif p == 8: # 14th order
		return np.array([
			-1.0, 
			-0.87174014850960661533744576122066343810378066967698, 
			-0.59170018143314230214451073139795318994570098951733, 
			-0.20929921790247886876865726034535125529554540508668, 
			0.20929921790247886876865726034535125529554540508668,
			0.59170018143314230214451073139795318994570098951733, 
			0.87174014850960661533744576122066343810378066967698, 
			1.0])
	elif p == 9: # 16th order
		return np.array([
			-1.0,
			-0.8997579954114601573123452444183379580514802955661,
			-0.67718627951073775344588542709134245071102964761391,
			-0.36311746382617815871075206870865921302064227760088, 
			0.0,
			0.36311746382617815871075206870865921302064227760088,
			0.67718627951073775344588542709134245071102964761391,
			0.8997579954114601573123452444183379580514802955661,
			1.0])
	elif p == 10: # 18th order
		return np.array([
			-1.0,
			-0.91953390816645881382893266082233813415354307544628,
			-0.73877386510550507500310617485983072501618510137693,
			-0.47792494981044449566117509273125799788677289333057,
			-0.16527895766638702462621976595817353323115034354948,
			0.1652789576663870246262197659581735332311503435495,
			0.47792494981044449566117509273125799788677289333057,
			0.73877386510550507500310617485983072501618510137693,
			0.91953390816645881382893266082233813415354307544628,
			1.0])