import sympy as sym
import numpy as np
# q_1, q_2, y_1, y_2, gamma_1, gamma_2, C_v_1, C_v_2, Pi_1, Pi_2, rho, p, e, q = sym.symbols('q_1, q_2, y_1, y_2, gamma_1, gamma_2, C_v_1, C_v_2, Pi_1, Pi_2, rho, p, e, q')
# rho, p, e = sym.symbols('rho, p, e')
# p = sym.Symbol('p')
# f= p**2 - gamma_1
# f = rho*( (y_1*(gamma_1-1)*C_v_1)/(p+Pi_1) + (y_2*(gamma_2-1)*C_v_2)/(p+Pi_2) ) - (y_1*C_v_1*(p+gamma_1*Pi_1)/(p+Pi_1) + y_2*C_v_2*(p*gamma_2*Pi_2)/(p+gamma_2)) / (e-(y_1*q_1 + y_2*q_2))
Pi_1 = 10**9
C_v_1 = 1816
C_p_1 = 4267
gamma_1 = C_p_1/C_v_1
q_1 = -1167*10**3
q_1_prime = 0 # J/(kg K)
lambda_1 = 0.6788 # w/(m K)

# water vapor
Pi_2 = 0 # Pa  
C_v_2 = 1040
C_p_2 = 1487
gamma_2 = C_p_2 / C_v_2
q_2 = 2030*10**3
q_2_prime = -23.26*10**3 # J/(kg K)
lambda_2 = 249.97 # w/(m K)

alpha_1 = 0.999999
alpha_2 = 1 - alpha_1

# p = 100000
T = 364.62970578554075
# p = 100000
# rho = 1/((gamma_1 - 1)*C_v_1*T/(p+Pi_1))*alpha_1 + 1/((gamma_2 - 1)*C_v_2*T/(p+Pi_2))*alpha_2

# y_1 = alpha_1 * 1/((gamma_1 - 1)*C_v_1*T/(p+Pi_1)) / rho
# y_2 = 1-y_1
y_1 = 0.99999999
y_2 = 0
e = 388785.5938896
rho = 1.11904522e+03
# e = y_1*((p+gamma_1*Pi_1)/(p+Pi_1)*C_v_1*T + q_1) + (1-y_1)*((p+gamma_2*Pi_2)/(p+Pi_2)*C_v_2*T + q_2)

# T_reciprocal_1 = rho*(y_1*(gamma_1 - 1)*C_v_1/(p + Pi_1) + y_2*(gamma_2 - 1)*C_v_2/(p + Pi_2))
# T_reciprocal_2 = (C_v_1*y_1*(p+gamma_1*Pi_1) / (p+Pi_1) + C_v_2*y_2*(p+gamma_2*Pi_2) / (p+Pi_2)) / (e-q_1*y_1-q_2*y_2)

# print(T_reciprocal_1)
# print(T_reciprocal_2)

# f = T_reciprocal_2 - T_reciprocal_1
# f = rho*( (y_1*(gamma_1-1)*C_v_1)/(p+Pi_1) + (y_2*(gamma_2-1)*C_v_2)/(p+Pi_2) ) - (y_1*C_v_1 + (y_1*(gamma_1 - 1)*C_v_1*Pi_1)/(p+Pi_1) + y_2*C_v_2 + (y_2*(gamma_2 - 1)*C_v_2*Pi_2)/(p+Pi_2)) / (e - (y_1*q_1 - y_2*q_2))

# f = rho*( (y_1*(gamma_1-1)*C_v_1)/(p+Pi_1) + (y_2*(gamma_2-1)*C_v_2)/(p+Pi_2) ) - (y_1*C_v_1 + (y_1*(gamma_1 - 1)*C_v_1*Pi_1)/(p+Pi_1) + y_2*C_v_2 + (y_2*(gamma_2 - 1)*C_v_2*Pi_2)/(p+Pi_2)) / (e - (y_1*q_1 - y_2*q_2))
# print(f)

# f = rho*( (y_1*(gamma_1-1)*C_v_1)/(p+Pi_1) + (y_2*(gamma_2-1)*C_v_2)/(p+Pi_2) ) - (y_1*C_v_1*(p+gamma_1*Pi_1)/(p+Pi_1) + y_2*C_v_2*(p+gamma_2*Pi_2)/(p+Pi_2)) / (e - y_1*q_1 - y_2*q_2)

# print(f)

# sol = (-C_v_1*Pi_1*gamma_1*y_1 - C_v_1*Pi_2*y_1 + C_v_1*e*gamma_1*rho*y_1 - C_v_1*e*rho*y_1 - C_v_1*gamma_1*q_1*rho*y_1**2 - C_v_1*gamma_1*q_2*rho*y_1*y_2 + C_v_1*q_1*rho*y_1**2 + C_v_1*q_2*rho*y_1*y_2 - C_v_2*Pi_1*y_2 - C_v_2*Pi_2*gamma_2*y_2 + C_v_2*e*gamma_2*rho*y_2 - C_v_2*e*rho*y_2 - C_v_2*gamma_2*q_1*rho*y_1*y_2 - C_v_2*gamma_2*q_2*rho*y_2**2 + C_v_2*q_1*rho*y_1*y_2 + C_v_2*q_2*rho*y_2**2 - np.sqrt(C_v_1**2*Pi_1**2*gamma_1**2*y_1**2 - 2*C_v_1**2*Pi_1*Pi_2*gamma_1*y_1**2 - 2*C_v_1**2*Pi_1*e*gamma_1**2*rho*y_1**2 + 2*C_v_1**2*Pi_1*e*gamma_1*rho*y_1**2 + 2*C_v_1**2*Pi_1*gamma_1**2*q_1*rho*y_1**3 + 2*C_v_1**2*Pi_1*gamma_1**2*q_2*rho*y_1**2*y_2 - 2*C_v_1**2*Pi_1*gamma_1*q_1*rho*y_1**3 - 2*C_v_1**2*Pi_1*gamma_1*q_2*rho*y_1**2*y_2 + C_v_1**2*Pi_2**2*y_1**2 + 2*C_v_1**2*Pi_2*e*gamma_1*rho*y_1**2 - 2*C_v_1**2*Pi_2*e*rho*y_1**2 - 2*C_v_1**2*Pi_2*gamma_1*q_1*rho*y_1**3 - 2*C_v_1**2*Pi_2*gamma_1*q_2*rho*y_1**2*y_2 + 2*C_v_1**2*Pi_2*q_1*rho*y_1**3 + 2*C_v_1**2*Pi_2*q_2*rho*y_1**2*y_2 + C_v_1**2*e**2*gamma_1**2*rho**2*y_1**2 - 2*C_v_1**2*e**2*gamma_1*rho**2*y_1**2 + C_v_1**2*e**2*rho**2*y_1**2 - 2*C_v_1**2*e*gamma_1**2*q_1*rho**2*y_1**3 - 2*C_v_1**2*e*gamma_1**2*q_2*rho**2*y_1**2*y_2 + 4*C_v_1**2*e*gamma_1*q_1*rho**2*y_1**3 + 4*C_v_1**2*e*gamma_1*q_2*rho**2*y_1**2*y_2 - 2*C_v_1**2*e*q_1*rho**2*y_1**3 - 2*C_v_1**2*e*q_2*rho**2*y_1**2*y_2 + C_v_1**2*gamma_1**2*q_1**2*rho**2*y_1**4 + 2*C_v_1**2*gamma_1**2*q_1*q_2*rho**2*y_1**3*y_2 + C_v_1**2*gamma_1**2*q_2**2*rho**2*y_1**2*y_2**2 - 2*C_v_1**2*gamma_1*q_1**2*rho**2*y_1**4 - 4*C_v_1**2*gamma_1*q_1*q_2*rho**2*y_1**3*y_2 - 2*C_v_1**2*gamma_1*q_2**2*rho**2*y_1**2*y_2**2 + C_v_1**2*q_1**2*rho**2*y_1**4 + 2*C_v_1**2*q_1*q_2*rho**2*y_1**3*y_2 + C_v_1**2*q_2**2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*Pi_1**2*gamma_1*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*Pi_2*gamma_1*gamma_2*y_1*y_2 - 4*C_v_1*C_v_2*Pi_1*Pi_2*gamma_1*y_1*y_2 - 4*C_v_1*C_v_2*Pi_1*Pi_2*gamma_2*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*Pi_2*y_1*y_2 - 2*C_v_1*C_v_2*Pi_1*e*gamma_1*gamma_2*rho*y_1*y_2 + 4*C_v_1*C_v_2*Pi_1*e*gamma_2*rho*y_1*y_2 - 2*C_v_1*C_v_2*Pi_1*e*rho*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*gamma_1*gamma_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_1*gamma_1*gamma_2*q_2*rho*y_1*y_2**2 - 4*C_v_1*C_v_2*Pi_1*gamma_2*q_1*rho*y_1**2*y_2 - 4*C_v_1*C_v_2*Pi_1*gamma_2*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_1*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_1*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_2**2*gamma_2*y_1*y_2 - 2*C_v_1*C_v_2*Pi_2*e*gamma_1*gamma_2*rho*y_1*y_2 + 4*C_v_1*C_v_2*Pi_2*e*gamma_1*rho*y_1*y_2 - 2*C_v_1*C_v_2*Pi_2*e*rho*y_1*y_2 + 2*C_v_1*C_v_2*Pi_2*gamma_1*gamma_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_2*gamma_1*gamma_2*q_2*rho*y_1*y_2**2 - 4*C_v_1*C_v_2*Pi_2*gamma_1*q_1*rho*y_1**2*y_2 - 4*C_v_1*C_v_2*Pi_2*gamma_1*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_2*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*e**2*gamma_1*gamma_2*rho**2*y_1*y_2 - 2*C_v_1*C_v_2*e**2*gamma_1*rho**2*y_1*y_2 - 2*C_v_1*C_v_2*e**2*gamma_2*rho**2*y_1*y_2 + 2*C_v_1*C_v_2*e**2*rho**2*y_1*y_2 - 4*C_v_1*C_v_2*e*gamma_1*gamma_2*q_1*rho**2*y_1**2*y_2 - 4*C_v_1*C_v_2*e*gamma_1*gamma_2*q_2*rho**2*y_1*y_2**2 + 4*C_v_1*C_v_2*e*gamma_1*q_1*rho**2*y_1**2*y_2 + 4*C_v_1*C_v_2*e*gamma_1*q_2*rho**2*y_1*y_2**2 + 4*C_v_1*C_v_2*e*gamma_2*q_1*rho**2*y_1**2*y_2 + 4*C_v_1*C_v_2*e*gamma_2*q_2*rho**2*y_1*y_2**2 - 4*C_v_1*C_v_2*e*q_1*rho**2*y_1**2*y_2 - 4*C_v_1*C_v_2*e*q_2*rho**2*y_1*y_2**2 + 2*C_v_1*C_v_2*gamma_1*gamma_2*q_1**2*rho**2*y_1**3*y_2 + 4*C_v_1*C_v_2*gamma_1*gamma_2*q_1*q_2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*gamma_1*gamma_2*q_2**2*rho**2*y_1*y_2**3 - 2*C_v_1*C_v_2*gamma_1*q_1**2*rho**2*y_1**3*y_2 - 4*C_v_1*C_v_2*gamma_1*q_1*q_2*rho**2*y_1**2*y_2**2 - 2*C_v_1*C_v_2*gamma_1*q_2**2*rho**2*y_1*y_2**3 - 2*C_v_1*C_v_2*gamma_2*q_1**2*rho**2*y_1**3*y_2 - 4*C_v_1*C_v_2*gamma_2*q_1*q_2*rho**2*y_1**2*y_2**2 - 2*C_v_1*C_v_2*gamma_2*q_2**2*rho**2*y_1*y_2**3 + 2*C_v_1*C_v_2*q_1**2*rho**2*y_1**3*y_2 + 4*C_v_1*C_v_2*q_1*q_2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*q_2**2*rho**2*y_1*y_2**3 + C_v_2**2*Pi_1**2*y_2**2 - 2*C_v_2**2*Pi_1*Pi_2*gamma_2*y_2**2 + 2*C_v_2**2*Pi_1*e*gamma_2*rho*y_2**2 - 2*C_v_2**2*Pi_1*e*rho*y_2**2 - 2*C_v_2**2*Pi_1*gamma_2*q_1*rho*y_1*y_2**2 - 2*C_v_2**2*Pi_1*gamma_2*q_2*rho*y_2**3 + 2*C_v_2**2*Pi_1*q_1*rho*y_1*y_2**2 + 2*C_v_2**2*Pi_1*q_2*rho*y_2**3 + C_v_2**2*Pi_2**2*gamma_2**2*y_2**2 - 2*C_v_2**2*Pi_2*e*gamma_2**2*rho*y_2**2 + 2*C_v_2**2*Pi_2*e*gamma_2*rho*y_2**2 + 2*C_v_2**2*Pi_2*gamma_2**2*q_1*rho*y_1*y_2**2 + 2*C_v_2**2*Pi_2*gamma_2**2*q_2*rho*y_2**3 - 2*C_v_2**2*Pi_2*gamma_2*q_1*rho*y_1*y_2**2 - 2*C_v_2**2*Pi_2*gamma_2*q_2*rho*y_2**3 + C_v_2**2*e**2*gamma_2**2*rho**2*y_2**2 - 2*C_v_2**2*e**2*gamma_2*rho**2*y_2**2 + C_v_2**2*e**2*rho**2*y_2**2 - 2*C_v_2**2*e*gamma_2**2*q_1*rho**2*y_1*y_2**2 - 2*C_v_2**2*e*gamma_2**2*q_2*rho**2*y_2**3 + 4*C_v_2**2*e*gamma_2*q_1*rho**2*y_1*y_2**2 + 4*C_v_2**2*e*gamma_2*q_2*rho**2*y_2**3 - 2*C_v_2**2*e*q_1*rho**2*y_1*y_2**2 - 2*C_v_2**2*e*q_2*rho**2*y_2**3 + C_v_2**2*gamma_2**2*q_1**2*rho**2*y_1**2*y_2**2 + 2*C_v_2**2*gamma_2**2*q_1*q_2*rho**2*y_1*y_2**3 + C_v_2**2*gamma_2**2*q_2**2*rho**2*y_2**4 - 2*C_v_2**2*gamma_2*q_1**2*rho**2*y_1**2*y_2**2 - 4*C_v_2**2*gamma_2*q_1*q_2*rho**2*y_1*y_2**3 - 2*C_v_2**2*gamma_2*q_2**2*rho**2*y_2**4 + C_v_2**2*q_1**2*rho**2*y_1**2*y_2**2 + 2*C_v_2**2*q_1*q_2*rho**2*y_1*y_2**3 + C_v_2**2*q_2**2*rho**2*y_2**4))/(2*C_v_1*y_1 + 2*C_v_2*y_2)
sol = (-C_v_1*Pi_1*gamma_1*y_1 - C_v_1*Pi_2*y_1 + C_v_1*e*gamma_1*rho*y_1 - C_v_1*e*rho*y_1 - C_v_1*gamma_1*q_1*rho*y_1**2 - C_v_1*gamma_1*q_2*rho*y_1*y_2 + C_v_1*q_1*rho*y_1**2 + C_v_1*q_2*rho*y_1*y_2 - C_v_2*Pi_1*y_2 - C_v_2*Pi_2*gamma_2*y_2 + C_v_2*e*gamma_2*rho*y_2 - C_v_2*e*rho*y_2 - C_v_2*gamma_2*q_1*rho*y_1*y_2 - C_v_2*gamma_2*q_2*rho*y_2**2 + C_v_2*q_1*rho*y_1*y_2 + C_v_2*q_2*rho*y_2**2 + np.sqrt(C_v_1**2*Pi_1**2*gamma_1**2*y_1**2 - 2*C_v_1**2*Pi_1*Pi_2*gamma_1*y_1**2 - 2*C_v_1**2*Pi_1*e*gamma_1**2*rho*y_1**2 + 2*C_v_1**2*Pi_1*e*gamma_1*rho*y_1**2 + 2*C_v_1**2*Pi_1*gamma_1**2*q_1*rho*y_1**3 + 2*C_v_1**2*Pi_1*gamma_1**2*q_2*rho*y_1**2*y_2 - 2*C_v_1**2*Pi_1*gamma_1*q_1*rho*y_1**3 - 2*C_v_1**2*Pi_1*gamma_1*q_2*rho*y_1**2*y_2 + C_v_1**2*Pi_2**2*y_1**2 + 2*C_v_1**2*Pi_2*e*gamma_1*rho*y_1**2 - 2*C_v_1**2*Pi_2*e*rho*y_1**2 - 2*C_v_1**2*Pi_2*gamma_1*q_1*rho*y_1**3 - 2*C_v_1**2*Pi_2*gamma_1*q_2*rho*y_1**2*y_2 + 2*C_v_1**2*Pi_2*q_1*rho*y_1**3 + 2*C_v_1**2*Pi_2*q_2*rho*y_1**2*y_2 + C_v_1**2*e**2*gamma_1**2*rho**2*y_1**2 - 2*C_v_1**2*e**2*gamma_1*rho**2*y_1**2 + C_v_1**2*e**2*rho**2*y_1**2 - 2*C_v_1**2*e*gamma_1**2*q_1*rho**2*y_1**3 - 2*C_v_1**2*e*gamma_1**2*q_2*rho**2*y_1**2*y_2 + 4*C_v_1**2*e*gamma_1*q_1*rho**2*y_1**3 + 4*C_v_1**2*e*gamma_1*q_2*rho**2*y_1**2*y_2 - 2*C_v_1**2*e*q_1*rho**2*y_1**3 - 2*C_v_1**2*e*q_2*rho**2*y_1**2*y_2 + C_v_1**2*gamma_1**2*q_1**2*rho**2*y_1**4 + 2*C_v_1**2*gamma_1**2*q_1*q_2*rho**2*y_1**3*y_2 + C_v_1**2*gamma_1**2*q_2**2*rho**2*y_1**2*y_2**2 - 2*C_v_1**2*gamma_1*q_1**2*rho**2*y_1**4 - 4*C_v_1**2*gamma_1*q_1*q_2*rho**2*y_1**3*y_2 - 2*C_v_1**2*gamma_1*q_2**2*rho**2*y_1**2*y_2**2 + C_v_1**2*q_1**2*rho**2*y_1**4 + 2*C_v_1**2*q_1*q_2*rho**2*y_1**3*y_2 + C_v_1**2*q_2**2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*Pi_1**2*gamma_1*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*Pi_2*gamma_1*gamma_2*y_1*y_2 - 4*C_v_1*C_v_2*Pi_1*Pi_2*gamma_1*y_1*y_2 - 4*C_v_1*C_v_2*Pi_1*Pi_2*gamma_2*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*Pi_2*y_1*y_2 - 2*C_v_1*C_v_2*Pi_1*e*gamma_1*gamma_2*rho*y_1*y_2 + 4*C_v_1*C_v_2*Pi_1*e*gamma_2*rho*y_1*y_2 - 2*C_v_1*C_v_2*Pi_1*e*rho*y_1*y_2 + 2*C_v_1*C_v_2*Pi_1*gamma_1*gamma_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_1*gamma_1*gamma_2*q_2*rho*y_1*y_2**2 - 4*C_v_1*C_v_2*Pi_1*gamma_2*q_1*rho*y_1**2*y_2 - 4*C_v_1*C_v_2*Pi_1*gamma_2*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_1*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_1*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_2**2*gamma_2*y_1*y_2 - 2*C_v_1*C_v_2*Pi_2*e*gamma_1*gamma_2*rho*y_1*y_2 + 4*C_v_1*C_v_2*Pi_2*e*gamma_1*rho*y_1*y_2 - 2*C_v_1*C_v_2*Pi_2*e*rho*y_1*y_2 + 2*C_v_1*C_v_2*Pi_2*gamma_1*gamma_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_2*gamma_1*gamma_2*q_2*rho*y_1*y_2**2 - 4*C_v_1*C_v_2*Pi_2*gamma_1*q_1*rho*y_1**2*y_2 - 4*C_v_1*C_v_2*Pi_2*gamma_1*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*Pi_2*q_1*rho*y_1**2*y_2 + 2*C_v_1*C_v_2*Pi_2*q_2*rho*y_1*y_2**2 + 2*C_v_1*C_v_2*e**2*gamma_1*gamma_2*rho**2*y_1*y_2 - 2*C_v_1*C_v_2*e**2*gamma_1*rho**2*y_1*y_2 - 2*C_v_1*C_v_2*e**2*gamma_2*rho**2*y_1*y_2 + 2*C_v_1*C_v_2*e**2*rho**2*y_1*y_2 - 4*C_v_1*C_v_2*e*gamma_1*gamma_2*q_1*rho**2*y_1**2*y_2 - 4*C_v_1*C_v_2*e*gamma_1*gamma_2*q_2*rho**2*y_1*y_2**2 + 4*C_v_1*C_v_2*e*gamma_1*q_1*rho**2*y_1**2*y_2 + 4*C_v_1*C_v_2*e*gamma_1*q_2*rho**2*y_1*y_2**2 + 4*C_v_1*C_v_2*e*gamma_2*q_1*rho**2*y_1**2*y_2 + 4*C_v_1*C_v_2*e*gamma_2*q_2*rho**2*y_1*y_2**2 - 4*C_v_1*C_v_2*e*q_1*rho**2*y_1**2*y_2 - 4*C_v_1*C_v_2*e*q_2*rho**2*y_1*y_2**2 + 2*C_v_1*C_v_2*gamma_1*gamma_2*q_1**2*rho**2*y_1**3*y_2 + 4*C_v_1*C_v_2*gamma_1*gamma_2*q_1*q_2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*gamma_1*gamma_2*q_2**2*rho**2*y_1*y_2**3 - 2*C_v_1*C_v_2*gamma_1*q_1**2*rho**2*y_1**3*y_2 - 4*C_v_1*C_v_2*gamma_1*q_1*q_2*rho**2*y_1**2*y_2**2 - 2*C_v_1*C_v_2*gamma_1*q_2**2*rho**2*y_1*y_2**3 - 2*C_v_1*C_v_2*gamma_2*q_1**2*rho**2*y_1**3*y_2 - 4*C_v_1*C_v_2*gamma_2*q_1*q_2*rho**2*y_1**2*y_2**2 - 2*C_v_1*C_v_2*gamma_2*q_2**2*rho**2*y_1*y_2**3 + 2*C_v_1*C_v_2*q_1**2*rho**2*y_1**3*y_2 + 4*C_v_1*C_v_2*q_1*q_2*rho**2*y_1**2*y_2**2 + 2*C_v_1*C_v_2*q_2**2*rho**2*y_1*y_2**3 + C_v_2**2*Pi_1**2*y_2**2 - 2*C_v_2**2*Pi_1*Pi_2*gamma_2*y_2**2 + 2*C_v_2**2*Pi_1*e*gamma_2*rho*y_2**2 - 2*C_v_2**2*Pi_1*e*rho*y_2**2 - 2*C_v_2**2*Pi_1*gamma_2*q_1*rho*y_1*y_2**2 - 2*C_v_2**2*Pi_1*gamma_2*q_2*rho*y_2**3 + 2*C_v_2**2*Pi_1*q_1*rho*y_1*y_2**2 + 2*C_v_2**2*Pi_1*q_2*rho*y_2**3 + C_v_2**2*Pi_2**2*gamma_2**2*y_2**2 - 2*C_v_2**2*Pi_2*e*gamma_2**2*rho*y_2**2 + 2*C_v_2**2*Pi_2*e*gamma_2*rho*y_2**2 + 2*C_v_2**2*Pi_2*gamma_2**2*q_1*rho*y_1*y_2**2 + 2*C_v_2**2*Pi_2*gamma_2**2*q_2*rho*y_2**3 - 2*C_v_2**2*Pi_2*gamma_2*q_1*rho*y_1*y_2**2 - 2*C_v_2**2*Pi_2*gamma_2*q_2*rho*y_2**3 + C_v_2**2*e**2*gamma_2**2*rho**2*y_2**2 - 2*C_v_2**2*e**2*gamma_2*rho**2*y_2**2 + C_v_2**2*e**2*rho**2*y_2**2 - 2*C_v_2**2*e*gamma_2**2*q_1*rho**2*y_1*y_2**2 - 2*C_v_2**2*e*gamma_2**2*q_2*rho**2*y_2**3 + 4*C_v_2**2*e*gamma_2*q_1*rho**2*y_1*y_2**2 + 4*C_v_2**2*e*gamma_2*q_2*rho**2*y_2**3 - 2*C_v_2**2*e*q_1*rho**2*y_1*y_2**2 - 2*C_v_2**2*e*q_2*rho**2*y_2**3 + C_v_2**2*gamma_2**2*q_1**2*rho**2*y_1**2*y_2**2 + 2*C_v_2**2*gamma_2**2*q_1*q_2*rho**2*y_1*y_2**3 + C_v_2**2*gamma_2**2*q_2**2*rho**2*y_2**4 - 2*C_v_2**2*gamma_2*q_1**2*rho**2*y_1**2*y_2**2 - 4*C_v_2**2*gamma_2*q_1*q_2*rho**2*y_1*y_2**3 - 2*C_v_2**2*gamma_2*q_2**2*rho**2*y_2**4 + C_v_2**2*q_1**2*rho**2*y_1**2*y_2**2 + 2*C_v_2**2*q_1*q_2*rho**2*y_1*y_2**3 + C_v_2**2*q_2**2*rho**2*y_2**4))/(2*C_v_1*y_1 + 2*C_v_2*y_2)
print(sol)

# soln = sym.simplify(sym.solve(f, p))
# print(soln)
exit()
